
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { userProfile } = await req.json();
    console.log('üöÄ Dados recebidos na API:', userProfile);

    const groqApiKey = Deno.env.get('GROQ_API_KEY');

    if (!groqApiKey || groqApiKey.trim() === '') {
      console.error('‚ùå GROQ_API_KEY n√£o configurada ou vazia');
      console.log('üìã Usando plano de fallback devido √† chave n√£o configurada');
      const fallbackPlan = createFallbackPlan(userProfile);
      
      return new Response(
        JSON.stringify(fallbackPlan),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    console.log('‚úÖ Chave Groq configurada, gerando prompt...');

    // Mapear valores para portugu√™s mais amig√°vel
    const goalsMap = {
      'perder_peso': 'perder peso e queimar gordura',
      'ganhar_massa': 'ganhar massa muscular',
      'tonificar': 'tonificar o corpo',
      'condicionamento': 'melhorar condicionamento f√≠sico',
      'forca': 'aumentar for√ßa',
      'flexibilidade': 'melhorar flexibilidade',
      'geral': 'fitness geral'
    };

    const equipmentMap = {
      'academia_completa': 'academia completa com todos os equipamentos',
      'casa_halteres': 'casa com halteres e equipamentos b√°sicos',
      'casa_basico': 'casa com equipamentos b√°sicos',
      'peso_corporal': 'apenas peso corporal, sem equipamentos',
      'parque': 'parque ou √°rea externa'
    };

    const limitationsMap = {
      'nenhuma': 'nenhuma limita√ß√£o f√≠sica',
      'joelho': 'problemas no joelho',
      'costas': 'problemas nas costas',
      'ombro': 'problemas no ombro',
      'tornozelo': 'problemas no tornozelo',
      'cardiaco': 'problemas card√≠acos',
      'outros': 'outras limita√ß√µes f√≠sicas'
    };

    const goals = goalsMap[userProfile.fitness_goals?.[0]] || userProfile.fitness_goals?.[0] || 'melhorar condicionamento geral';
    const equipment = equipmentMap[userProfile.equipment] || userProfile.equipment || 'equipamentos b√°sicos';
    const limitations = limitationsMap[userProfile.limitations] || userProfile.limitations || 'nenhuma limita√ß√£o';

    // Criar prompt detalhado para planos completos
    const prompt = `Voc√™ √© um personal trainer experiente e especialista em ci√™ncia do exerc√≠cio. Crie um plano de treino EXTREMAMENTE DETALHADO e personalizado em portugu√™s com base nas seguintes informa√ß√µes:

PERFIL DO USU√ÅRIO:
- Idade: ${userProfile.age || 'N√£o informado'} anos
- Sexo: ${userProfile.gender || 'N√£o informado'}
- Altura: ${userProfile.height || 'N√£o informado'} cm
- Peso: ${userProfile.weight || 'N√£o informado'} kg
- N√≠vel de condicionamento: ${userProfile.fitness_level || 'Iniciante'}
- Objetivos: ${goals}
- Dias dispon√≠veis: ${userProfile.available_days || 3} por semana
- Dura√ß√£o da sess√£o: ${userProfile.session_duration || 60} minutos
- Equipamentos: ${equipment}
- Limita√ß√µes: ${limitations}

INSTRU√á√ïES PARA O PLANO:
1. Crie um plano dividido por DIAS DA SEMANA espec√≠ficos
2. Cada exerc√≠cio deve ter instru√ß√µes biomec√¢nicas detalhadas
3. Inclua progress√£o semanal espec√≠fica
4. Adicione tempo de descanso espec√≠fico por exerc√≠cio
5. Inclua aquecimento e alongamento detalhados
6. Adicione dicas de execu√ß√£o e m√∫sculos trabalhados
7. Inclua varia√ß√µes para diferentes n√≠veis
8. Adicione protocolo de recupera√ß√£o entre treinos

RETORNE APENAS um JSON v√°lido no seguinte formato:

{
  "title": "Plano de Treino Personalizado - [Objetivo Principal]",
  "description": "Descri√ß√£o detalhada considerando perfil completo, objetivos e limita√ß√µes espec√≠ficas",
  "difficulty_level": "iniciante|intermediario|avancado",
  "duration_weeks": 12,
  "exercises": [
    {
      "name": "Nome do exerc√≠cio completo",
      "sets": 3,
      "reps": "8-12",
      "rest": "90s",
      "instructions": "Instru√ß√µes detalhadas de execu√ß√£o, m√∫sculos trabalhados, dicas biomec√¢nicas e progress√£o"
    }
  ],
  "nutrition_tips": [
    "Dica nutricional 1 espec√≠fica para o objetivo",
    "Dica nutricional 2 espec√≠fica para o perfil"
  ]
}

IMPORTANTE: 
- Crie um plano COMPLETO com pelo menos ${userProfile.available_days || 3} dias de treino efetivo
- Considere TODAS as limita√ß√µes f√≠sicas mencionadas
- Adapte os exerc√≠cios aos equipamentos dispon√≠veis
- Inclua progress√£o realista e segura
- O campo difficulty_level deve ser exatamente: "iniciante", "intermediario", ou "avancado"
- Seja espec√≠fico nas instru√ß√µes biomec√¢nicas
- Retorne APENAS o JSON, sem markdown, sem explica√ß√µes adicionais`;

    console.log('üì§ Enviando requisi√ß√£o para Groq API...');

    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${groqApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'llama-3.3-70b-versatile',
        messages: [
          { role: 'user', content: prompt }
        ],
        max_tokens: 8000,
        temperature: 0.3,
      }),
    });

    console.log('üìä Status da resposta Groq:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API Groq:', response.status, errorText);
      
      // Se der erro na API, usar plano fallback
      console.log('üìã Usando plano de fallback devido ao erro na API Groq');
      const fallbackPlan = createFallbackPlan(userProfile);
      
      return new Response(
        JSON.stringify(fallbackPlan),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    const data = await response.json();
    console.log('‚úÖ Resposta recebida do Groq com sucesso');

    let content = data.choices?.[0]?.message?.content || '';

    if (!content || content.trim() === '') {
      console.log('‚ö†Ô∏è Conte√∫do vazio da API Groq, usando fallback');
      const fallbackPlan = createFallbackPlan(userProfile);
      
      return new Response(
        JSON.stringify(fallbackPlan),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    // Limpar e extrair JSON da resposta
    content = content.trim();
    
    // Remover poss√≠veis marcadores de c√≥digo
    if (content.includes('```json')) {
      const jsonMatch = content.match(/```json\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        content = jsonMatch[1];
      }
    } else if (content.includes('```')) {
      const jsonMatch = content.match(/```\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        content = jsonMatch[1];
      }
    }

    let workoutPlan;
    try {
      workoutPlan = JSON.parse(content);
      console.log('‚úÖ JSON parseado com sucesso da API Groq');
      
      // Validar e corrigir difficulty_level
      const validLevels = ['iniciante', 'intermediario', 'avancado'];
      if (!workoutPlan.difficulty_level || !validLevels.includes(workoutPlan.difficulty_level)) {
        workoutPlan.difficulty_level = mapFitnessLevelToDifficulty(userProfile.fitness_level);
      }
      
      // Validar estrutura b√°sica
      if (!workoutPlan.title || !workoutPlan.exercises || !Array.isArray(workoutPlan.exercises)) {
        throw new Error('Estrutura do JSON inv√°lida da API Groq');
      }

      // Adicionar flag indicando que veio da API Groq
      workoutPlan.source = 'groq_api';
      
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON da API Groq:', parseError);
      console.log('üìÑ Conte√∫do recebido:', content);
      
      // Usar plano de fallback
      console.log('üìã Usando plano de fallback devido ao erro de parse');
      workoutPlan = createFallbackPlan(userProfile);
    }

    console.log('üéâ Retornando plano final gerado pela API Groq');

    return new Response(
      JSON.stringify(workoutPlan),
      { 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        } 
      }
    );

  } catch (error) {
    console.error('üí• Erro geral no generate-workout-plan:', error);
    
    // Em caso de erro geral, retornar plano b√°sico
    const basicPlan = createFallbackPlan(null);

    return new Response(
      JSON.stringify(basicPlan),
      { 
        status: 200,
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        } 
      }
    );
  }
});

function mapFitnessLevelToDifficulty(fitnessLevel: string): string {
  switch (fitnessLevel) {
    case 'sedentario':
    case 'pouco_ativo':
      return 'iniciante';
    case 'moderado':
    case 'ativo':
    case 'intermediario':
      return 'intermediario';
    case 'muito_ativo':
    case 'avancado':
      return 'avancado';
    default:
      return 'iniciante';
  }
}

function createFallbackPlan(userProfile: any) {
  const level = userProfile?.fitness_level || 'sedentario';
  const goals = userProfile?.fitness_goals?.[0] || 'condicionamento geral';
  const difficultyLevel = mapFitnessLevelToDifficulty(level);
  
  // Mapear objetivos para descri√ß√£o
  const goalsDescription = {
    'perder_peso': 'perda de peso e queima de gordura',
    'ganhar_massa': 'ganho de massa muscular',
    'tonificar': 'tonifica√ß√£o corporal',
    'condicionamento': 'melhora do condicionamento f√≠sico',
    'forca': 'aumento da for√ßa',
    'flexibilidade': 'melhora da flexibilidade',
    'geral': 'condicionamento geral'
  };

  const goalDesc = goalsDescription[goals] || 'condicionamento geral';
  
  return {
    title: `Plano de Treino ${difficultyLevel.charAt(0).toUpperCase() + difficultyLevel.slice(1)} - ${goalDesc.charAt(0).toUpperCase() + goalDesc.slice(1)}`,
    description: `Plano personalizado focado em ${goalDesc} para n√≠vel ${difficultyLevel}. Este treino foi desenvolvido considerando seu perfil e objetivos espec√≠ficos.`,
    difficulty_level: difficultyLevel,
    duration_weeks: 12,
    source: 'fallback',
    exercises: [
      {
        name: "Segunda-feira: Aquecimento Din√¢mico",
        sets: 1,
        reps: "8-10 minutos",
        rest: "N/A",
        instructions: "Aquecimento articular completo: rota√ß√µes de pesco√ßo, ombros, quadris e tornozelos. Caminhada no local com eleva√ß√£o gradual dos joelhos. Polichinelos leves. Prepare o corpo para os exerc√≠cios principais."
      },
      {
        name: "Segunda-feira: Agachamento Livre",
        sets: level === 'sedentario' ? 3 : 4,
        reps: level === 'sedentario' ? "8-10" : "12-15",
        rest: "90s",
        instructions: "Posi√ß√£o inicial: p√©s na largura dos ombros, pontas levemente para fora. Descida: flexione quadris e joelhos simultaneamente, mantendo o peso nos calcanhares. Des√ßa at√© coxas paralelas ao ch√£o. Subida: empurre o ch√£o com os p√©s, ativando gl√∫teos e quadr√≠ceps. Mantenha o tronco ereto e core ativado durante todo movimento."
      },
      {
        name: "Segunda-feira: Flex√£o de Bra√ßo",
        sets: 3,
        reps: level === 'sedentario' ? "5-8" : "10-15",
        rest: "60s",
        instructions: "Posi√ß√£o: apoio nas m√£os (na largura dos ombros) e pontas dos p√©s. Corpo alinhado da cabe√ßa aos calcanhares. Descida controlada at√© peito quase tocar o solo. Subida explosiva estendendo completamente os bra√ßos. Respira√ß√£o: inspire na descida, expire na subida. Varia√ß√£o mais f√°cil: apoio nos joelhos."
      },
      {
        name: "Quarta-feira: Prancha Isom√©trica",
        sets: 3,
        reps: level === 'sedentario' ? "20-30s" : "45-60s",
        rest: "45s",
        instructions: "Posi√ß√£o: apoio nos antebra√ßos e pontas dos p√©s. Corpo reto como uma t√°bua. Core contra√≠do, gl√∫teos ativados. Respira√ß√£o normal e controlada. Olhar fixo no ch√£o. Evite arquear as costas ou elevar muito o quadril. Foque na qualidade da contra√ß√£o abdominal."
      },
      {
        name: "Quarta-feira: Afundo Alternado",
        sets: 3,
        reps: level === 'sedentario' ? "6-8 cada perna" : "10-12 cada perna",
        rest: "60s",
        instructions: "Passo √† frente amplo, descendo at√© formar 90¬∞ em ambos os joelhos. Joelho da frente alinhado com o tornozelo. Tronco ereto, core ativado. Impulso com perna da frente para retornar. Alterne as pernas. Trabalha quadr√≠ceps, gl√∫teos e melhora equil√≠brio e coordena√ß√£o."
      },
      {
        name: "Sexta-feira: Burpee Modificado",
        sets: level === 'sedentario' ? 2 : 3,
        reps: level === 'sedentario' ? "3-5" : "5-8",
        rest: "90s",
        instructions: "Movimento completo: agachamento, apoio no ch√£o, extens√£o das pernas (posi√ß√£o de flex√£o), retorno √† posi√ß√£o de agachamento, salto com bra√ßos elevados. Exerc√≠cio metab√≥lico completo que trabalha for√ßa e condicionamento. Execute com controle, priorizando a t√©cnica sobre a velocidade."
      },
      {
        name: "Alongamento Final Completo",
        sets: 1,
        reps: "10-15 minutos",
        rest: "N/A",
        instructions: "Sequ√™ncia de alongamentos est√°ticos: quadr√≠ceps (30s), isquiotibiais (30s), panturrilha (30s), gl√∫teos (30s), peitoral (30s), ombros (30s), lombar (30s). Respira√ß√£o profunda e relaxante. Mantenha cada posi√ß√£o sem dor, apenas tens√£o confort√°vel. Essencial para recupera√ß√£o e flexibilidade."
      }
    ],
    nutrition_tips: [
      "Prote√≠na p√≥s-treino: consuma 20-30g dentro de 30min ap√≥s exercitar-se (whey, ovos, frango, peixe)",
      "Hidrata√ß√£o otimizada: 35ml por kg de peso corporal + 500-750ml extra nos dias de treino",
      "Carboidratos pr√©-treino: consuma 30-50g de carboidratos complexos 1-2h antes (aveia, batata-doce, banana)",
      "Timing nutricional: caf√© da manh√£ rico em prote√≠na, almo√ßo balanceado, jantar leve 3h antes de dormir",
      "Micronutrientes essenciais: inclua vegetais coloridos, frutas variadas e oleaginosas para vitaminas e minerais",
      "Sono reparador: 7-9h por noite para recupera√ß√£o muscular e produ√ß√£o de horm√¥nios anab√≥licos",
      "Suplementa√ß√£o b√°sica: considere vitamina D, √¥mega-3 e multivitam√≠nico ap√≥s consulta profissional"
    ]
  };
}
