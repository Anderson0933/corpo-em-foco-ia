
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { userProfile } = await req.json();
    console.log('üöÄ Dados recebidos na API:', userProfile);

    const groqApiKey = Deno.env.get('GROQ_API_KEY');

    if (!groqApiKey || groqApiKey.trim() === '') {
      console.error('‚ùå GROQ_API_KEY n√£o configurada ou vazia');
      console.log('üìã Usando plano de fallback devido √† chave n√£o configurada');
      const fallbackPlan = createFallbackPlan(userProfile);
      
      return new Response(
        JSON.stringify(fallbackPlan),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    console.log('‚úÖ Chave Groq configurada, gerando prompt personalizado...');

    // Mapear valores para portugu√™s mais amig√°vel
    const goalsMap = {
      'perder_peso': 'perder peso e queimar gordura corporal',
      'ganhar_massa': 'ganhar massa muscular e hipertrofia',
      'tonificar': 'tonificar o corpo e definir m√∫sculos',
      'condicionamento': 'melhorar condicionamento cardiovascular',
      'forca': 'aumentar for√ßa e pot√™ncia muscular',
      'flexibilidade': 'melhorar flexibilidade e mobilidade',
      'geral': 'condicionamento f√≠sico geral'
    };

    const equipmentMap = {
      'academia_completa': 'academia completa com halteres, barras, m√°quinas de muscula√ß√£o, esteiras e equipamentos de cardio',
      'casa_halteres': 'treino em casa com halteres, barras, el√°sticos e equipamentos b√°sicos',
      'casa_basico': 'treino em casa com equipamentos b√°sicos limitados',
      'peso_corporal': 'exerc√≠cios usando apenas o peso corporal, sem equipamentos',
      'parque': 'exerc√≠cios ao ar livre em parques com barras e equipamentos p√∫blicos'
    };

    const limitationsMap = {
      'nenhuma': 'nenhuma limita√ß√£o f√≠sica',
      'joelho': 'problemas no joelho - evitar impacto e sobrecarga',
      'costas': 'problemas nas costas - foco em fortalecimento do core',
      'ombro': 'problemas no ombro - evitar movimentos overhead',
      'tornozelo': 'problemas no tornozelo - exerc√≠cios de baixo impacto',
      'cardiaco': 'problemas card√≠acos - intensidade moderada controlada',
      'outros': 'outras limita√ß√µes f√≠sicas espec√≠ficas'
    };

    const fitnessLevelMap = {
      'sedentario': 'sedent√°rio - iniciante absoluto sem experi√™ncia em exerc√≠cios',
      'pouco_ativo': 'pouco ativo - experi√™ncia limitada com exerc√≠cios',
      'moderado': 'moderadamente ativo - alguma experi√™ncia com treinos',
      'ativo': 'ativo - experi√™ncia regular com exerc√≠cios',
      'muito_ativo': 'muito ativo - experi√™ncia avan√ßada em treinamento',
      'avancado': 'atl√©tico avan√ßado - alto n√≠vel de condicionamento'
    };

    const goals = goalsMap[userProfile.fitness_goals?.[0]] || userProfile.fitness_goals?.[0] || 'melhorar condicionamento geral';
    const equipment = equipmentMap[userProfile.equipment] || userProfile.equipment || 'equipamentos b√°sicos';
    const limitations = limitationsMap[userProfile.limitations] || userProfile.limitations || 'nenhuma limita√ß√£o';
    const fitnessLevel = fitnessLevelMap[userProfile.fitness_level] || userProfile.fitness_level || 'iniciante';

    // Calcular IMC para personaliza√ß√£o adicional
    let imcInfo = '';
    if (userProfile.height && userProfile.weight) {
      const heightInMeters = userProfile.height / 100;
      const imc = userProfile.weight / (heightInMeters * heightInMeters);
      imcInfo = `IMC: ${imc.toFixed(1)} - `;
      if (imc < 18.5) imcInfo += 'Abaixo do peso - foco em ganho de massa e for√ßa';
      else if (imc < 25) imcInfo += 'Peso normal - manuten√ß√£o e tonifica√ß√£o';
      else if (imc < 30) imcInfo += 'Sobrepeso - foco em queima de gordura';
      else imcInfo += 'Obesidade - exerc√≠cios de baixo impacto e queima cal√≥rica';
    }

    // Criar prompt super detalhado e personalizado
    const prompt = `Voc√™ √© um renomado personal trainer certificado com 15 anos de experi√™ncia em treinamento personalizado. Crie um plano de treino EXTREMAMENTE DETALHADO, ESPEC√çFICO e PERSONALIZADO em portugu√™s baseado no perfil completo abaixo:

PERFIL COMPLETO DO ALUNO:
- Idade: ${userProfile.age || 'N√£o informado'} anos
- Sexo: ${userProfile.gender || 'N√£o informado'}
- Altura: ${userProfile.height || 'N√£o informado'} cm
- Peso: ${userProfile.weight || 'N√£o informado'} kg
- ${imcInfo}
- N√≠vel atual: ${fitnessLevel}
- Objetivo principal: ${goals}
- Dias dispon√≠veis: ${userProfile.available_days || 3} por semana
- Dura√ß√£o por sess√£o: ${userProfile.session_duration || 60} minutos
- Equipamentos dispon√≠veis: ${equipment}
- Limita√ß√µes f√≠sicas: ${limitations}

INSTRU√á√ïES DETALHADAS PARA UM PLANO PROFISSIONAL:

1. ESTRUTURA DO TREINO PERIODIZADO:
   - Crie um plano de 12 semanas dividido em 4 fases de 3 semanas cada
   - PRIMEIRA SEMANA: Adapta√ß√£o anat√¥mica (cargas leves, foco na t√©cnica)
   - SEGUNDA SEMANA: Progress√£o gradual (aumento de 10-15% na intensidade)
   - TERCEIRA SEMANA: Consolida√ß√£o (manuten√ß√£o da carga, melhora da execu√ß√£o)
   - QUARTA SEMANA: Progress√£o para pr√≥xima fase
   - Continue este padr√£o at√© a 12¬™ semana

2. NOMENCLATURA OBRIGAT√ìRIA DOS EXERC√çCIOS:
   - Use SEMPRE: "PRIMEIRA SEMANA - Treino 1: [Nome do Exerc√≠cio]"
   - Use SEMPRE: "SEGUNDA SEMANA - Treino 1: [Nome do Exerc√≠cio]"
   - Use SEMPRE: "TERCEIRA SEMANA - Treino 2: [Nome do Exerc√≠cio]"
   - E assim por diante at√© "D√âCIMA SEGUNDA SEMANA"
   - Para aquecimentos: "PRIMEIRA SEMANA - Aquecimento Espec√≠fico"

3. EXERC√çCIOS ESPEC√çFICOS:
   - Escolha exerc√≠cios que maximizem o objetivo: ${goals}
   - Inclua varia√ß√µes progressivas e regressivas
   - Especifique t√©cnica de execu√ß√£o biomec√¢nica detalhada
   - Adicione m√∫sculos prim√°rios e secund√°rios trabalhados
   - Inclua tempo sob tens√£o e cad√™ncia quando relevante

4. PRESCRI√á√ÉO DETALHADA:
   - S√©ries, repeti√ß√µes e descanso espec√≠ficos por semana
   - Percentual de carga ou percep√ß√£o de esfor√ßo
   - Progress√µes semanais concretas
   - Adapta√ß√µes para limita√ß√µes: ${limitations}

5. PERIODIZA√á√ÉO POR SEMANAS:
   - Semanas 1-3: Adapta√ß√£o anat√¥mica
   - Semanas 4-6: Desenvolvimento b√°sico
   - Semanas 7-9: Intensifica√ß√£o
   - Semanas 10-12: Polimento/Pico

6. AQUECIMENTO E RECUPERA√á√ÉO:
   - Aquecimento espec√≠fico para cada semana (8-12 minutos)
   - Alongamento e mobilidade p√≥s-treino
   - Protocolos de recupera√ß√£o entre sess√µes

RETORNE APENAS um JSON v√°lido no seguinte formato:

{
  "title": "Plano Periodizado: [Objetivo] - N√≠vel [N√≠vel]",
  "description": "Plano periodizado de 12 semanas espec√≠fico para [objetivo principal], considerando [limita√ß√µes], com [X] sess√µes semanais usando [equipamentos]. Desenvolvido considerando perfil individual completo.",
  "difficulty_level": "iniciante|intermediario|avancado",
  "duration_weeks": 12,
  "exercises": [
    {
      "name": "PRIMEIRA SEMANA - Aquecimento Espec√≠fico",
      "sets": 1,
      "reps": "10-12 minutos",
      "rest": "Transi√ß√£o",
      "instructions": "AQUECIMENTO DETALHADO: [5-6 exerc√≠cios espec√≠ficos com descri√ß√£o biomec√¢nica completa, prepara√ß√£o articular, ativa√ß√£o neuromuscular, eleva√ß√£o da temperatura corporal]. Progress√£o espec√≠fica para primeira semana com intensidade baixa."
    },
    {
      "name": "PRIMEIRA SEMANA - Treino 1: [Nome do Exerc√≠cio Principal Espec√≠fico]",
      "sets": "3",
      "reps": "8-12",
      "rest": "90-120s",
      "instructions": "EXECU√á√ÉO T√âCNICA: [Posi√ß√£o inicial detalhada, fase exc√™ntrica, fase conc√™ntrica, respira√ß√£o, m√∫sculos prim√°rios e estabilizadores]. PRIMEIRA SEMANA: Foco total na adapta√ß√£o anat√¥mica e aprendizado motor. ADAPTA√á√ïES: [considera√ß√µes para limita√ß√µes espec√≠ficas]. VARIA√á√ïES: [alternativas por n√≠vel]."
    },
    {
      "name": "SEGUNDA SEMANA - Treino 1: [Mesmo exerc√≠cio com progress√£o]",
      "sets": "3-4",
      "reps": "10-15",
      "rest": "90-120s",
      "instructions": "EXECU√á√ÉO T√âCNICA: [mesma base t√©cnica]. SEGUNDA SEMANA: Progress√£o gradual com 10-15% mais intensidade ou volume. Manter foco na t√©cnica perfeita. ADAPTA√á√ïES: [considera√ß√µes espec√≠ficas]. VARIA√á√ïES: [progress√µes para segunda semana]."
    }
  ],
  "nutrition_tips": [
    "Estrat√©gia nutricional espec√≠fica para [objetivo]: timing, macronutrientes e hidrata√ß√£o",
    "Suplementa√ß√£o b√°sica recomendada considerando [objetivo] e perfil individual",
    "Timing nutricional pr√© e p√≥s-treino otimizado para [objetivo]",
    "Protocolo de hidrata√ß√£o espec√≠fico para intensidade de treino planejada"
  ]
}

REQUISITOS CR√çTICOS:
- Crie NO M√çNIMO ${Math.max(userProfile.available_days || 3, 3) * 12} exerc√≠cios completos (incluindo progress√µes semanais)
- SEMPRE use a nomenclatura: "PRIMEIRA SEMANA", "SEGUNDA SEMANA", etc.
- Cada exerc√≠cio deve ter instru√ß√µes de NO M√çNIMO 80 palavras
- Considere TODAS as limita√ß√µes: ${limitations}
- Adapte 100% aos equipamentos: ${equipment}
- Fa√ßa progress√£o semanal espec√≠fica e realista
- Use terminology t√©cnica profissional
- O campo difficulty_level deve ser exatamente: "iniciante", "intermediario", ou "avancado"
- Seja espec√≠fico em m√∫sculos trabalhados, biomec√¢nica e progress√µes

RETORNE APENAS O JSON, sem markdown, sem explica√ß√µes adicionais.`;

    console.log('üì§ Enviando requisi√ß√£o detalhada para Groq API...');

    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${groqApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'llama-3.3-70b-versatile',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© um personal trainer certificado especialista em ci√™ncia do exerc√≠cio com 15 anos de experi√™ncia. Crie planos de treino extremamente detalhados e personalizados baseados no perfil completo do aluno.' 
          },
          { role: 'user', content: prompt }
        ],
        max_tokens: 8000,
        temperature: 0.2, // Menor para mais consist√™ncia
      }),
    });

    console.log('üìä Status da resposta Groq:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API Groq:', response.status, errorText);
      
      console.log('üìã Usando plano de fallback devido ao erro na API Groq');
      const fallbackPlan = createFallbackPlan(userProfile);
      
      return new Response(
        JSON.stringify(fallbackPlan),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    const data = await response.json();
    console.log('‚úÖ Resposta recebida do Groq com sucesso');

    let content = data.choices?.[0]?.message?.content || '';

    if (!content || content.trim() === '') {
      console.log('‚ö†Ô∏è Conte√∫do vazio da API Groq, usando fallback');
      const fallbackPlan = createFallbackPlan(userProfile);
      
      return new Response(
        JSON.stringify(fallbackPlan),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    // Limpar e extrair JSON da resposta
    content = content.trim();
    
    // Remover poss√≠veis marcadores de c√≥digo
    if (content.includes('```json')) {
      const jsonMatch = content.match(/```json\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        content = jsonMatch[1];
      }
    } else if (content.includes('```')) {
      const jsonMatch = content.match(/```\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        content = jsonMatch[1];
      }
    }

    let workoutPlan;
    try {
      workoutPlan = JSON.parse(content);
      console.log('‚úÖ JSON parseado com sucesso da API Groq');
      
      // Validar e corrigir difficulty_level
      const validLevels = ['iniciante', 'intermediario', 'avancado'];
      if (!workoutPlan.difficulty_level || !validLevels.includes(workoutPlan.difficulty_level)) {
        workoutPlan.difficulty_level = mapFitnessLevelToDifficulty(userProfile.fitness_level);
      }
      
      // Validar estrutura b√°sica
      if (!workoutPlan.title || !workoutPlan.exercises || !Array.isArray(workoutPlan.exercises)) {
        throw new Error('Estrutura do JSON inv√°lida da API Groq');
      }

      // Adicionar flag indicando que veio da API Groq
      workoutPlan.source = 'groq_api';
      workoutPlan.generated_for = {
        goals: goals,
        equipment: equipment,
        level: fitnessLevel,
        limitations: limitations,
        days: userProfile.available_days || 3,
        duration: userProfile.session_duration || 60
      };
      
      console.log('üéØ Plano personalizado gerado com sucesso pela API Groq!');
      
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON da API Groq:', parseError);
      console.log('üìÑ Conte√∫do recebido:', content.substring(0, 500) + '...');
      
      // Usar plano de fallback
      console.log('üìã Usando plano de fallback devido ao erro de parse');
      workoutPlan = createFallbackPlan(userProfile);
    }

    console.log('üéâ Retornando plano final gerado pela API Groq');

    return new Response(
      JSON.stringify(workoutPlan),
      { 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        } 
      }
    );

  } catch (error) {
    console.error('üí• Erro geral no generate-workout-plan:', error);
    
    // Em caso de erro geral, retornar plano b√°sico
    const basicPlan = createFallbackPlan(null);

    return new Response(
      JSON.stringify(basicPlan),
      { 
        status: 200,
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        } 
      }
    );
  }
});

function mapFitnessLevelToDifficulty(fitnessLevel: string): string {
  switch (fitnessLevel) {
    case 'sedentario':
    case 'pouco_ativo':
      return 'iniciante';
    case 'moderado':
    case 'ativo':
    case 'intermediario':
      return 'intermediario';
    case 'muito_ativo':
    case 'avancado':
      return 'avancado';
    default:
      return 'iniciante';
  }
}

function createFallbackPlan(userProfile: any) {
  const level = userProfile?.fitness_level || 'sedentario';
  const goals = userProfile?.fitness_goals?.[0] || 'condicionamento geral';
  const difficultyLevel = mapFitnessLevelToDifficulty(level);
  
  // Mapear objetivos para descri√ß√£o
  const goalsDescription = {
    'perder_peso': 'perda de peso e queima de gordura',
    'ganhar_massa': 'ganho de massa muscular',
    'tonificar': 'tonifica√ß√£o corporal',
    'condicionamento': 'melhora do condicionamento f√≠sico',
    'forca': 'aumento da for√ßa',
    'flexibilidade': 'melhora da flexibilidade',
    'geral': 'condicionamento geral'
  };

  const goalDesc = goalsDescription[goals] || 'condicionamento geral';
  
  return {
    title: `Plano Periodizado ${difficultyLevel.charAt(0).toUpperCase() + difficultyLevel.slice(1)} - ${goalDesc.charAt(0).toUpperCase() + goalDesc.slice(1)}`,
    description: `Plano periodizado de 12 semanas espec√≠fico para ${goalDesc} para n√≠vel ${difficultyLevel}. Este treino foi desenvolvido considerando seu perfil e objetivos espec√≠ficos.`,
    difficulty_level: difficultyLevel,
    duration_weeks: 12,
    source: 'fallback',
    exercises: [
      {
        name: "PRIMEIRA SEMANA - Aquecimento Din√¢mico",
        sets: 1,
        reps: "8-10 minutos",
        rest: "N/A",
        instructions: "Aquecimento articular completo: rota√ß√µes de pesco√ßo, ombros, quadris e tornozelos. Caminhada no local com eleva√ß√£o gradual dos joelhos. Polichinelos leves. PRIMEIRA SEMANA: Foco na adapta√ß√£o e prepara√ß√£o do sistema cardiovascular."
      },
      {
        name: "PRIMEIRA SEMANA - Treino 1: Agachamento Livre",
        sets: level === 'sedentario' ? 2 : 3,
        reps: level === 'sedentario' ? "8-10" : "10-12",
        rest: "90s",
        instructions: "Posi√ß√£o inicial: p√©s na largura dos ombros, pontas levemente para fora. Descida: flexione quadris e joelhos simultaneamente, mantendo o peso nos calcanhares. Des√ßa at√© coxas paralelas ao ch√£o. Subida: empurre o ch√£o com os p√©s, ativando gl√∫teos e quadr√≠ceps. PRIMEIRA SEMANA: Cargas muito leves, foco total na t√©cnica e mobilidade articular."
      },
      {
        name: "PRIMEIRA SEMANA - Treino 1: Flex√£o de Bra√ßo",
        sets: 2,
        reps: level === 'sedentario' ? "5-8" : "8-10",
        rest: "60s",
        instructions: "Posi√ß√£o: apoio nas m√£os (na largura dos ombros) e pontas dos p√©s. Corpo alinhado da cabe√ßa aos calcanhares. Descida controlada at√© peito quase tocar o solo. Subida explosiva estendendo completamente os bra√ßos. PRIMEIRA SEMANA: Adapta√ß√£o dos m√∫sculos estabilizadores, pode usar apoio nos joelhos se necess√°rio."
      },
      {
        name: "SEGUNDA SEMANA - Treino 1: Agachamento Livre",
        sets: level === 'sedentario' ? 3 : 4,
        reps: level === 'sedentario' ? "10-12" : "12-15",
        rest: "90s",
        instructions: "Mesma t√©cnica da primeira semana. SEGUNDA SEMANA: Progress√£o gradual com 15% mais repeti√ß√µes. Manter cad√™ncia controlada (2 segundos descida, 1 segundo subida). Foco na ativa√ß√£o dos gl√∫teos e core."
      },
      {
        name: "SEGUNDA SEMANA - Treino 1: Flex√£o de Bra√ßo",
        sets: 3,
        reps: level === 'sedentario' ? "8-10" : "10-12",
        rest: "60s",
        instructions: "Progress√£o da primeira semana. SEGUNDA SEMANA: Aumento do volume total, manter t√©cnica perfeita. Se conseguir fazer todas as repeti√ß√µes facilmente, progredir para flex√£o completa (sair do apoio nos joelhos)."
      },
      {
        name: "TERCEIRA SEMANA - Treino 1: Agachamento com Pausa",
        sets: level === 'sedentario' ? 3 : 4,
        reps: level === 'sedentario' ? "10-12" : "12-15",
        rest: "90-120s",
        instructions: "Mesmo movimento do agachamento livre, mas com pausa de 2 segundos na posi√ß√£o mais baixa. TERCEIRA SEMANA: Consolida√ß√£o da for√ßa e melhora da estabilidade. Maior ativa√ß√£o muscular devido √† pausa isom√©trica."
      },
      {
        name: "TERCEIRA SEMANA - Treino 1: Flex√£o Diamante (Iniciantes: Normal)",
        sets: 3,
        reps: level === 'sedentario' ? "6-8" : "8-12",
        rest: "90s",
        instructions: "Para iniciantes: flex√£o normal com t√©cnica aperfei√ßoada. Para intermedi√°rios: flex√£o diamante (m√£os formando diamante). TERCEIRA SEMANA: Varia√ß√£o para estimular diferentes padr√µes de movimento e evitar adapta√ß√£o."
      }
    ],
    nutrition_tips: [
      "PRIMEIRA E SEGUNDA SEMANA: Prote√≠na p√≥s-treino moderada (15-20g) para adapta√ß√£o inicial",
      "TERCEIRA SEMANA: Aumento para 25-30g de prote√≠na p√≥s-treino para suporte √† recupera√ß√£o",
      "Hidrata√ß√£o progressiva: 35ml por kg de peso + 300ml extra na primeira semana, 500ml extra da segunda semana em diante",
      "Carboidratos pr√©-treino: come√ßar com 20-30g na primeira semana, progredir para 30-50g",
      "Timing nutricional: manter consist√™ncia nos hor√°rios das refei√ß√µes para regular o metabolismo",
      "Sono reparador: 7-9h por noite, especialmente importante nas primeiras semanas de adapta√ß√£o",
      "Suplementa√ß√£o b√°sica: considere apenas ap√≥s a terceira semana, quando o corpo estiver adaptado"
    ]
  };
}
