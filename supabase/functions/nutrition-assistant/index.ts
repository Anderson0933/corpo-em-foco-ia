
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, conversationHistory } = await req.json();
    console.log('Mensagem de nutri√ß√£o recebida:', message);
    
    const grokApiKey = Deno.env.get('GROK_API_KEY');

    if (!grokApiKey) {
      console.error('GROK_API_KEY n√£o configurada');
      
      // Retornar resposta de fallback para nutri√ß√£o
      const fallbackResponse = "Ol√°! Sou sua assistente de nutri√ß√£o. No momento estou com problemas de configura√ß√£o, mas posso te dar algumas dicas b√°sicas:\n\nü•ó **Alimenta√ß√£o balanceada:**\n‚Ä¢ Inclua prote√≠nas em todas as refei√ß√µes\n‚Ä¢ Consuma 5-7 por√ß√µes de frutas e vegetais por dia\n‚Ä¢ Prefira carboidratos integrais\n‚Ä¢ Mantenha-se hidratado (2-3L de √°gua/dia)\n\nüí° **Dicas pr√°ticas:**\n‚Ä¢ Fa√ßa 5-6 refei√ß√µes menores ao dia\n‚Ä¢ Evite alimentos ultraprocessados\n‚Ä¢ Mastigue bem os alimentos\n\nPor favor, tente novamente em alguns minutos.";
      
      return new Response(
        JSON.stringify({ message: fallbackResponse }),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    // Preparar mensagens para o Grok
    const messages: ChatMessage[] = [
      {
        role: 'assistant',
        content: 'Voc√™ √© uma nutricionista especializada em alimenta√ß√£o saud√°vel, planos alimentares, receitas e suplementa√ß√£o. Responda sempre em portugu√™s de forma clara, pr√°tica e cient√≠fica. D√™ conselhos espec√≠ficos sobre nutri√ß√£o, receitas saud√°veis, planejamento alimentar e orienta√ß√µes sobre suplementos quando apropriado.'
      },
      ...conversationHistory.slice(-10).map((msg: any) => ({
        role: msg.role,
        content: msg.content
      }))
    ];

    console.log('Enviando para Grok API (nutri√ß√£o)...');

    const response = await fetch('https://api.x.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${grokApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'grok-beta',
        messages: messages,
        max_tokens: 1000,
        temperature: 0.7,
      }),
    });

    console.log('Status da resposta Grok (nutri√ß√£o):', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Erro da API Grok (nutri√ß√£o):', errorText);
      
      // Retornar resposta de fallback espec√≠fica baseada na mensagem
      let fallbackResponse = "Desculpe, estou com problemas t√©cnicos no momento. ";
      
      if (message.toLowerCase().includes('receita') || message.toLowerCase().includes('cozinhar')) {
        fallbackResponse += "Sobre receitas: experimente saladas coloridas com prote√≠na (frango, peixe, ovos), smoothies com frutas e vegetais verdes, ou pratos assados com temperos naturais.";
      } else if (message.toLowerCase().includes('peso') || message.toLowerCase().includes('emagrecer')) {
        fallbackResponse += "Para perder peso: crie um d√©ficit cal√≥rico moderado, aumente o consumo de prote√≠nas e fibras, reduza a√ß√∫cares e fa√ßa refei√ß√µes regulares.";
      } else if (message.toLowerCase().includes('m√∫sculo') || message.toLowerCase().includes('massa')) {
        fallbackResponse += "Para ganhar massa muscular: consuma 1,6-2,2g de prote√≠na por kg de peso corporal, inclua carboidratos p√≥s-treino e mantenha um super√°vit cal√≥rico controlado.";
      } else if (message.toLowerCase().includes('caloria')) {
        fallbackResponse += "Sobre calorias: para uma estimativa b√°sica, use a f√≥rmula: peso √ó 24 (para mulheres) ou peso √ó 26 (para homens), depois ajuste conforme atividade f√≠sica.";
      } else {
        fallbackResponse += "Posso te ajudar com planejamento alimentar, receitas saud√°veis, contagem de calorias e orienta√ß√µes nutricionais. Fa√ßa uma pergunta espec√≠fica!";
      }
      
      return new Response(
        JSON.stringify({ message: fallbackResponse }),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    const data = await response.json();
    const assistantMessage = data.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar sua solicita√ß√£o sobre nutri√ß√£o. Tente reformular sua pergunta.';

    console.log('Resposta de nutri√ß√£o processada com sucesso');

    return new Response(
      JSON.stringify({ message: assistantMessage }),
      { 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        } 
      }
    );

  } catch (error) {
    console.error('Erro no nutrition-assistant:', error);
    
    const fallbackResponse = "Desculpe, ocorreu um erro inesperado. Sou sua assistente de nutri√ß√£o e posso te ajudar com:\n\nü•ó Planejamento alimentar\nüçé Receitas saud√°veis\nüìä Contagem de calorias e macros\nüíä Orienta√ß√µes sobre suplementa√ß√£o\nüéØ Estrat√©gias para objetivos espec√≠ficos\n\nTente fazer sua pergunta novamente!";
    
    return new Response(
      JSON.stringify({ message: fallbackResponse }),
      { 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        } 
      }
    );
  }
});
